{
	"info": {
		"_postman_id": "e3236162-5100-494e-a62f-256f2a5c1992",
		"name": "Flask_Mongo_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26357742"
	},
	"item": [
		{
			"name": "All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains data\", function () {\r",
							"    pm.response.to.have.jsonBody(\"result\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain at least one user\", function () {\r",
							"    const result = pm.response.json().result;\r",
							"    pm.expect(result.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Users should have id, name, email and password fields\", function () {\r",
							"    const result = pm.response.json().result;\r",
							"    result.forEach(user => {\r",
							"        pm.expect(user.id).to.exist;\r",
							"        pm.expect(user.name).to.exist;\r",
							"        pm.expect(user.email).to.exist;\r",
							"        pm.expect(user.password).to.exist;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains data\", function () {\r",
							"    pm.response.to.have.jsonBody(\"result\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain at least one user\", function () {\r",
							"    const result = pm.response.json().result;\r",
							"    pm.expect(result.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Users should have id, name, email and password fields\", function () {\r",
							"    const result = pm.response.json().result;\r",
							"    result.forEach(user => {\r",
							"        pm.expect(user.id).to.exist;\r",
							"        pm.expect(user.name).to.exist;\r",
							"        pm.expect(user.email).to.exist;\r",
							"        pm.expect(user.password).to.exist;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/users/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"User added successfully\", function () {\r",
							"    pm.expect(pm.response.json().result).to.eql(\"User added successfully\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"ABC DEF\",\r\n    \"email\": \"abc@example.com\",\r\n    \"password\": \"password000\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:5000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"User updated successfully\", function () {\r",
							"    pm.expect(pm.response.json().result).to.eql(\"User updated successfully\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DEF Doe\",\r\n    \"email\": \"test@mail.com\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:5000/users/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"User deleted successfully\", function () {\r",
							"    pm.expect(pm.response.json().result).to.eql(\"User deleted successfully\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/users/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users",
						"4"
					]
				}
			},
			"response": []
		}
	]
}